// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: channel/fwdcommit.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../cosmos/base/v1beta1/coin";
import * as pb_1 from "google-protobuf";
export namespace channel.channel {
    export class Fwdcommit extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            Index?: string;
            ChannelID?: string;
            Sender?: string;
            Receiver?: string;
            HashcodeDest?: string;
            TimelockReceiver?: string;
            TimelockSender?: string;
            HashcodeHtlc?: string;
            CoinTransfer?: dependency_1.cosmos.base.v1beta1.Coin;
            Creator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Index" in data && data.Index != undefined) {
                    this.Index = data.Index;
                }
                if ("ChannelID" in data && data.ChannelID != undefined) {
                    this.ChannelID = data.ChannelID;
                }
                if ("Sender" in data && data.Sender != undefined) {
                    this.Sender = data.Sender;
                }
                if ("Receiver" in data && data.Receiver != undefined) {
                    this.Receiver = data.Receiver;
                }
                if ("HashcodeDest" in data && data.HashcodeDest != undefined) {
                    this.HashcodeDest = data.HashcodeDest;
                }
                if ("TimelockReceiver" in data && data.TimelockReceiver != undefined) {
                    this.TimelockReceiver = data.TimelockReceiver;
                }
                if ("TimelockSender" in data && data.TimelockSender != undefined) {
                    this.TimelockSender = data.TimelockSender;
                }
                if ("HashcodeHtlc" in data && data.HashcodeHtlc != undefined) {
                    this.HashcodeHtlc = data.HashcodeHtlc;
                }
                if ("CoinTransfer" in data && data.CoinTransfer != undefined) {
                    this.CoinTransfer = data.CoinTransfer;
                }
                if ("Creator" in data && data.Creator != undefined) {
                    this.Creator = data.Creator;
                }
            }
        }
        get Index() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Index(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ChannelID() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set ChannelID(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Sender() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Sender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Receiver() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Receiver(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get HashcodeDest() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set HashcodeDest(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get TimelockReceiver() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set TimelockReceiver(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get TimelockSender() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set TimelockSender(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get HashcodeHtlc() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set HashcodeHtlc(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get CoinTransfer() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 9) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set CoinTransfer(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get Creator() {
            return pb_1.Message.getField(this, 10) as string;
        }
        set Creator(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            Index?: string;
            ChannelID?: string;
            Sender?: string;
            Receiver?: string;
            HashcodeDest?: string;
            TimelockReceiver?: string;
            TimelockSender?: string;
            HashcodeHtlc?: string;
            CoinTransfer?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            Creator?: string;
        }) {
            const message = new Fwdcommit({});
            if (data.Index != null) {
                message.Index = data.Index;
            }
            if (data.ChannelID != null) {
                message.ChannelID = data.ChannelID;
            }
            if (data.Sender != null) {
                message.Sender = data.Sender;
            }
            if (data.Receiver != null) {
                message.Receiver = data.Receiver;
            }
            if (data.HashcodeDest != null) {
                message.HashcodeDest = data.HashcodeDest;
            }
            if (data.TimelockReceiver != null) {
                message.TimelockReceiver = data.TimelockReceiver;
            }
            if (data.TimelockSender != null) {
                message.TimelockSender = data.TimelockSender;
            }
            if (data.HashcodeHtlc != null) {
                message.HashcodeHtlc = data.HashcodeHtlc;
            }
            if (data.CoinTransfer != null) {
                message.CoinTransfer = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.CoinTransfer);
            }
            if (data.Creator != null) {
                message.Creator = data.Creator;
            }
            return message;
        }
        toObject() {
            const data: {
                Index?: string;
                ChannelID?: string;
                Sender?: string;
                Receiver?: string;
                HashcodeDest?: string;
                TimelockReceiver?: string;
                TimelockSender?: string;
                HashcodeHtlc?: string;
                CoinTransfer?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                Creator?: string;
            } = {};
            if (this.Index != null) {
                data.Index = this.Index;
            }
            if (this.ChannelID != null) {
                data.ChannelID = this.ChannelID;
            }
            if (this.Sender != null) {
                data.Sender = this.Sender;
            }
            if (this.Receiver != null) {
                data.Receiver = this.Receiver;
            }
            if (this.HashcodeDest != null) {
                data.HashcodeDest = this.HashcodeDest;
            }
            if (this.TimelockReceiver != null) {
                data.TimelockReceiver = this.TimelockReceiver;
            }
            if (this.TimelockSender != null) {
                data.TimelockSender = this.TimelockSender;
            }
            if (this.HashcodeHtlc != null) {
                data.HashcodeHtlc = this.HashcodeHtlc;
            }
            if (this.CoinTransfer != null) {
                data.CoinTransfer = this.CoinTransfer.toObject();
            }
            if (this.Creator != null) {
                data.Creator = this.Creator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Index === "string" && this.Index.length)
                writer.writeString(1, this.Index);
            if (typeof this.ChannelID === "string" && this.ChannelID.length)
                writer.writeString(2, this.ChannelID);
            if (typeof this.Sender === "string" && this.Sender.length)
                writer.writeString(3, this.Sender);
            if (typeof this.Receiver === "string" && this.Receiver.length)
                writer.writeString(4, this.Receiver);
            if (typeof this.HashcodeDest === "string" && this.HashcodeDest.length)
                writer.writeString(5, this.HashcodeDest);
            if (typeof this.TimelockReceiver === "string" && this.TimelockReceiver.length)
                writer.writeString(6, this.TimelockReceiver);
            if (typeof this.TimelockSender === "string" && this.TimelockSender.length)
                writer.writeString(7, this.TimelockSender);
            if (typeof this.HashcodeHtlc === "string" && this.HashcodeHtlc.length)
                writer.writeString(8, this.HashcodeHtlc);
            if (this.CoinTransfer !== undefined)
                writer.writeMessage(9, this.CoinTransfer, () => this.CoinTransfer.serialize(writer));
            if (typeof this.Creator === "string" && this.Creator.length)
                writer.writeString(10, this.Creator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fwdcommit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fwdcommit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Index = reader.readString();
                        break;
                    case 2:
                        message.ChannelID = reader.readString();
                        break;
                    case 3:
                        message.Sender = reader.readString();
                        break;
                    case 4:
                        message.Receiver = reader.readString();
                        break;
                    case 5:
                        message.HashcodeDest = reader.readString();
                        break;
                    case 6:
                        message.TimelockReceiver = reader.readString();
                        break;
                    case 7:
                        message.TimelockSender = reader.readString();
                        break;
                    case 8:
                        message.HashcodeHtlc = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.CoinTransfer, () => message.CoinTransfer = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 10:
                        message.Creator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Fwdcommit {
            return Fwdcommit.deserialize(bytes);
        }
    }
}
