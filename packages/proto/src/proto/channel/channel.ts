// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: channel/channel.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace channel.channel {
    export class Channel extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            index?: string;
            multisigAddr?: string;
            partA?: string;
            partB?: string;
            denom?: string;
            sequence?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("multisigAddr" in data && data.multisigAddr != undefined) {
                    this.multisigAddr = data.multisigAddr;
                }
                if ("partA" in data && data.partA != undefined) {
                    this.partA = data.partA;
                }
                if ("partB" in data && data.partB != undefined) {
                    this.partB = data.partB;
                }
                if ("denom" in data && data.denom != undefined) {
                    this.denom = data.denom;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
            }
        }
        get index() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get multisigAddr() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set multisigAddr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get partA() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set partA(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get partB() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set partB(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get denom() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set denom(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get sequence() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set sequence(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            index?: string;
            multisigAddr?: string;
            partA?: string;
            partB?: string;
            denom?: string;
            sequence?: number;
        }) {
            const message = new Channel({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.multisigAddr != null) {
                message.multisigAddr = data.multisigAddr;
            }
            if (data.partA != null) {
                message.partA = data.partA;
            }
            if (data.partB != null) {
                message.partB = data.partB;
            }
            if (data.denom != null) {
                message.denom = data.denom;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: string;
                multisigAddr?: string;
                partA?: string;
                partB?: string;
                denom?: string;
                sequence?: number;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.multisigAddr != null) {
                data.multisigAddr = this.multisigAddr;
            }
            if (this.partA != null) {
                data.partA = this.partA;
            }
            if (this.partB != null) {
                data.partB = this.partB;
            }
            if (this.denom != null) {
                data.denom = this.denom;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.index === "string" && this.index.length)
                writer.writeString(1, this.index);
            if (typeof this.multisigAddr === "string" && this.multisigAddr.length)
                writer.writeString(2, this.multisigAddr);
            if (typeof this.partA === "string" && this.partA.length)
                writer.writeString(3, this.partA);
            if (typeof this.partB === "string" && this.partB.length)
                writer.writeString(4, this.partB);
            if (typeof this.denom === "string" && this.denom.length)
                writer.writeString(5, this.denom);
            if (this.sequence !== undefined)
                writer.writeUint64(6, this.sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Channel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Channel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readString();
                        break;
                    case 2:
                        message.multisigAddr = reader.readString();
                        break;
                    case 3:
                        message.partA = reader.readString();
                        break;
                    case 4:
                        message.partB = reader.readString();
                        break;
                    case 5:
                        message.denom = reader.readString();
                        break;
                    case 6:
                        message.sequence = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Channel {
            return Channel.deserialize(bytes);
        }
    }
}
