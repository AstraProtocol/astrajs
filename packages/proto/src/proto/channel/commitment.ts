// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: channel/commitment.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../cosmos/base/v1beta1/coin";
import * as pb_1 from "google-protobuf";
export namespace channel.channel {
    export class Commitment extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            index?: string;
            from?: string;
            coinA?: dependency_1.cosmos.base.v1beta1.Coin;
            toATimelock?: string;
            toBHashlock?: string;
            coinlock?: dependency_1.cosmos.base.v1beta1.Coin;
            blockheight?: number;
            hashcode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("coinA" in data && data.coinA != undefined) {
                    this.coinA = data.coinA;
                }
                if ("toATimelock" in data && data.toATimelock != undefined) {
                    this.toATimelock = data.toATimelock;
                }
                if ("toBHashlock" in data && data.toBHashlock != undefined) {
                    this.toBHashlock = data.toBHashlock;
                }
                if ("coinlock" in data && data.coinlock != undefined) {
                    this.coinlock = data.coinlock;
                }
                if ("blockheight" in data && data.blockheight != undefined) {
                    this.blockheight = data.blockheight;
                }
                if ("hashcode" in data && data.hashcode != undefined) {
                    this.hashcode = data.hashcode;
                }
            }
        }
        get index() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get coinA() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 3) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set coinA(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get toATimelock() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set toATimelock(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get toBHashlock() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set toBHashlock(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get coinlock() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 6) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set coinlock(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get blockheight() {
            return pb_1.Message.getField(this, 7) as number;
        }
        set blockheight(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get hashcode() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set hashcode(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            index?: string;
            from?: string;
            coinA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            toATimelock?: string;
            toBHashlock?: string;
            coinlock?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            blockheight?: number;
            hashcode?: string;
        }) {
            const message = new Commitment({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.coinA != null) {
                message.coinA = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.coinA);
            }
            if (data.toATimelock != null) {
                message.toATimelock = data.toATimelock;
            }
            if (data.toBHashlock != null) {
                message.toBHashlock = data.toBHashlock;
            }
            if (data.coinlock != null) {
                message.coinlock = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.coinlock);
            }
            if (data.blockheight != null) {
                message.blockheight = data.blockheight;
            }
            if (data.hashcode != null) {
                message.hashcode = data.hashcode;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: string;
                from?: string;
                coinA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                toATimelock?: string;
                toBHashlock?: string;
                coinlock?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                blockheight?: number;
                hashcode?: string;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.coinA != null) {
                data.coinA = this.coinA.toObject();
            }
            if (this.toATimelock != null) {
                data.toATimelock = this.toATimelock;
            }
            if (this.toBHashlock != null) {
                data.toBHashlock = this.toBHashlock;
            }
            if (this.coinlock != null) {
                data.coinlock = this.coinlock.toObject();
            }
            if (this.blockheight != null) {
                data.blockheight = this.blockheight;
            }
            if (this.hashcode != null) {
                data.hashcode = this.hashcode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.index === "string" && this.index.length)
                writer.writeString(1, this.index);
            if (typeof this.from === "string" && this.from.length)
                writer.writeString(2, this.from);
            if (this.coinA !== undefined)
                writer.writeMessage(3, this.coinA, () => this.coinA.serialize(writer));
            if (typeof this.toATimelock === "string" && this.toATimelock.length)
                writer.writeString(4, this.toATimelock);
            if (typeof this.toBHashlock === "string" && this.toBHashlock.length)
                writer.writeString(5, this.toBHashlock);
            if (this.coinlock !== undefined)
                writer.writeMessage(6, this.coinlock, () => this.coinlock.serialize(writer));
            if (this.blockheight !== undefined)
                writer.writeUint64(7, this.blockheight);
            if (typeof this.hashcode === "string" && this.hashcode.length)
                writer.writeString(8, this.hashcode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Commitment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Commitment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.coinA, () => message.coinA = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 4:
                        message.toATimelock = reader.readString();
                        break;
                    case 5:
                        message.toBHashlock = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.coinlock, () => message.coinlock = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 7:
                        message.blockheight = reader.readUint64();
                        break;
                    case 8:
                        message.hashcode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Commitment {
            return Commitment.deserialize(bytes);
        }
    }
}
