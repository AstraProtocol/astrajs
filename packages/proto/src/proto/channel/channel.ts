// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: channel/channel.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace channel.channel {
    export class Channel extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            Index?: string;
            MultisigAddr?: string;
            PartA?: string;
            PartB?: string;
            Denom?: string;
            Sequence?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Index" in data && data.Index != undefined) {
                    this.Index = data.Index;
                }
                if ("MultisigAddr" in data && data.MultisigAddr != undefined) {
                    this.MultisigAddr = data.MultisigAddr;
                }
                if ("PartA" in data && data.PartA != undefined) {
                    this.PartA = data.PartA;
                }
                if ("PartB" in data && data.PartB != undefined) {
                    this.PartB = data.PartB;
                }
                if ("Denom" in data && data.Denom != undefined) {
                    this.Denom = data.Denom;
                }
                if ("Sequence" in data && data.Sequence != undefined) {
                    this.Sequence = data.Sequence;
                }
            }
        }
        get Index() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Index(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get MultisigAddr() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set MultisigAddr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get PartA() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set PartA(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get PartB() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set PartB(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Denom() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set Denom(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get Sequence() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set Sequence(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            Index?: string;
            MultisigAddr?: string;
            PartA?: string;
            PartB?: string;
            Denom?: string;
            Sequence?: string;
        }) {
            const message = new Channel({});
            if (data.Index != null) {
                message.Index = data.Index;
            }
            if (data.MultisigAddr != null) {
                message.MultisigAddr = data.MultisigAddr;
            }
            if (data.PartA != null) {
                message.PartA = data.PartA;
            }
            if (data.PartB != null) {
                message.PartB = data.PartB;
            }
            if (data.Denom != null) {
                message.Denom = data.Denom;
            }
            if (data.Sequence != null) {
                message.Sequence = data.Sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                Index?: string;
                MultisigAddr?: string;
                PartA?: string;
                PartB?: string;
                Denom?: string;
                Sequence?: string;
            } = {};
            if (this.Index != null) {
                data.Index = this.Index;
            }
            if (this.MultisigAddr != null) {
                data.MultisigAddr = this.MultisigAddr;
            }
            if (this.PartA != null) {
                data.PartA = this.PartA;
            }
            if (this.PartB != null) {
                data.PartB = this.PartB;
            }
            if (this.Denom != null) {
                data.Denom = this.Denom;
            }
            if (this.Sequence != null) {
                data.Sequence = this.Sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Index === "string" && this.Index.length)
                writer.writeString(1, this.Index);
            if (typeof this.MultisigAddr === "string" && this.MultisigAddr.length)
                writer.writeString(2, this.MultisigAddr);
            if (typeof this.PartA === "string" && this.PartA.length)
                writer.writeString(3, this.PartA);
            if (typeof this.PartB === "string" && this.PartB.length)
                writer.writeString(4, this.PartB);
            if (typeof this.Denom === "string" && this.Denom.length)
                writer.writeString(5, this.Denom);
            if (typeof this.Sequence === "string" && this.Sequence.length)
                writer.writeString(6, this.Sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Channel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Channel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Index = reader.readString();
                        break;
                    case 2:
                        message.MultisigAddr = reader.readString();
                        break;
                    case 3:
                        message.PartA = reader.readString();
                        break;
                    case 4:
                        message.PartB = reader.readString();
                        break;
                    case 5:
                        message.Denom = reader.readString();
                        break;
                    case 6:
                        message.Sequence = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Channel {
            return Channel.deserialize(bytes);
        }
    }
}
