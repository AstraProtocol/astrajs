// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: astra/inflation/v1/inflation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace astra.inflation.v1 {
    export class InflationParameters extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            max_staking_rewards?: string;
            r?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_staking_rewards" in data && data.max_staking_rewards != undefined) {
                    this.max_staking_rewards = data.max_staking_rewards;
                }
                if ("r" in data && data.r != undefined) {
                    this.r = data.r;
                }
            }
        }
        get max_staking_rewards() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set max_staking_rewards(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get r() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set r(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            max_staking_rewards?: string;
            r?: string;
        }) {
            const message = new InflationParameters({});
            if (data.max_staking_rewards != null) {
                message.max_staking_rewards = data.max_staking_rewards;
            }
            if (data.r != null) {
                message.r = data.r;
            }
            return message;
        }
        toObject() {
            const data: {
                max_staking_rewards?: string;
                r?: string;
            } = {};
            if (this.max_staking_rewards != null) {
                data.max_staking_rewards = this.max_staking_rewards;
            }
            if (this.r != null) {
                data.r = this.r;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.max_staking_rewards === "string" && this.max_staking_rewards.length)
                writer.writeString(1, this.max_staking_rewards);
            if (typeof this.r === "string" && this.r.length)
                writer.writeString(2, this.r);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InflationParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InflationParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.max_staking_rewards = reader.readString();
                        break;
                    case 2:
                        message.r = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InflationParameters {
            return InflationParameters.deserialize(bytes);
        }
    }
}
