// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: channel/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../cosmos/base/v1beta1/coin";
import * as pb_1 from "google-protobuf";
export namespace channel.channel {
    export class MsgCommitment extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            creator?: string;
            from?: string;
            coinA?: dependency_1.cosmos.base.v1beta1.Coin;
            toATimelock?: string;
            blockheight?: number;
            toBHashlock?: string;
            hashcode?: string;
            coinlock?: dependency_1.cosmos.base.v1beta1.Coin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("coinA" in data && data.coinA != undefined) {
                    this.coinA = data.coinA;
                }
                if ("toATimelock" in data && data.toATimelock != undefined) {
                    this.toATimelock = data.toATimelock;
                }
                if ("blockheight" in data && data.blockheight != undefined) {
                    this.blockheight = data.blockheight;
                }
                if ("toBHashlock" in data && data.toBHashlock != undefined) {
                    this.toBHashlock = data.toBHashlock;
                }
                if ("hashcode" in data && data.hashcode != undefined) {
                    this.hashcode = data.hashcode;
                }
                if ("coinlock" in data && data.coinlock != undefined) {
                    this.coinlock = data.coinlock;
                }
            }
        }
        get creator() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get coinA() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 3) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set coinA(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get toATimelock() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set toATimelock(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get blockheight() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set blockheight(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get toBHashlock() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set toBHashlock(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get hashcode() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set hashcode(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get coinlock() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 8) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set coinlock(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        static fromObject(data: {
            creator?: string;
            from?: string;
            coinA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            toATimelock?: string;
            blockheight?: number;
            toBHashlock?: string;
            hashcode?: string;
            coinlock?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
        }) {
            const message = new MsgCommitment({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.coinA != null) {
                message.coinA = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.coinA);
            }
            if (data.toATimelock != null) {
                message.toATimelock = data.toATimelock;
            }
            if (data.blockheight != null) {
                message.blockheight = data.blockheight;
            }
            if (data.toBHashlock != null) {
                message.toBHashlock = data.toBHashlock;
            }
            if (data.hashcode != null) {
                message.hashcode = data.hashcode;
            }
            if (data.coinlock != null) {
                message.coinlock = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.coinlock);
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                from?: string;
                coinA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                toATimelock?: string;
                blockheight?: number;
                toBHashlock?: string;
                hashcode?: string;
                coinlock?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.coinA != null) {
                data.coinA = this.coinA.toObject();
            }
            if (this.toATimelock != null) {
                data.toATimelock = this.toATimelock;
            }
            if (this.blockheight != null) {
                data.blockheight = this.blockheight;
            }
            if (this.toBHashlock != null) {
                data.toBHashlock = this.toBHashlock;
            }
            if (this.hashcode != null) {
                data.hashcode = this.hashcode;
            }
            if (this.coinlock != null) {
                data.coinlock = this.coinlock.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.creator === "string" && this.creator.length)
                writer.writeString(1, this.creator);
            if (typeof this.from === "string" && this.from.length)
                writer.writeString(2, this.from);
            if (this.coinA !== undefined)
                writer.writeMessage(3, this.coinA, () => this.coinA.serialize(writer));
            if (typeof this.toATimelock === "string" && this.toATimelock.length)
                writer.writeString(4, this.toATimelock);
            if (this.blockheight !== undefined)
                writer.writeUint64(5, this.blockheight);
            if (typeof this.toBHashlock === "string" && this.toBHashlock.length)
                writer.writeString(6, this.toBHashlock);
            if (typeof this.hashcode === "string" && this.hashcode.length)
                writer.writeString(7, this.hashcode);
            if (this.coinlock !== undefined)
                writer.writeMessage(8, this.coinlock, () => this.coinlock.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCommitment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCommitment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.coinA, () => message.coinA = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 4:
                        message.toATimelock = reader.readString();
                        break;
                    case 5:
                        message.blockheight = reader.readUint64();
                        break;
                    case 6:
                        message.toBHashlock = reader.readString();
                        break;
                    case 7:
                        message.hashcode = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.coinlock, () => message.coinlock = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCommitment {
            return MsgCommitment.deserialize(bytes);
        }
    }
    export class MsgCommitmentResponse extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            index?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get index() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            index?: string;
        }) {
            const message = new MsgCommitmentResponse({});
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: string;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.index === "string" && this.index.length)
                writer.writeString(1, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCommitmentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCommitmentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCommitmentResponse {
            return MsgCommitmentResponse.deserialize(bytes);
        }
    }
    export class MsgWithdrawTimelock extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            creator?: string;
            to?: string;
            index?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get creator() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            to?: string;
            index?: string;
        }) {
            const message = new MsgWithdrawTimelock({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                to?: string;
                index?: string;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.creator === "string" && this.creator.length)
                writer.writeString(1, this.creator);
            if (typeof this.to === "string" && this.to.length)
                writer.writeString(2, this.to);
            if (typeof this.index === "string" && this.index.length)
                writer.writeString(3, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgWithdrawTimelock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawTimelock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.to = reader.readString();
                        break;
                    case 3:
                        message.index = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgWithdrawTimelock {
            return MsgWithdrawTimelock.deserialize(bytes);
        }
    }
    export class MsgWithdrawTimelockResponse extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgWithdrawTimelockResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgWithdrawTimelockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawTimelockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgWithdrawTimelockResponse {
            return MsgWithdrawTimelockResponse.deserialize(bytes);
        }
    }
    export class MsgWithdrawHashlock extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            creator?: string;
            to?: string;
            index?: string;
            secret?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
            }
        }
        get creator() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get secret() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set secret(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            creator?: string;
            to?: string;
            index?: string;
            secret?: string;
        }) {
            const message = new MsgWithdrawHashlock({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.secret != null) {
                message.secret = data.secret;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                to?: string;
                index?: string;
                secret?: string;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.secret != null) {
                data.secret = this.secret;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.creator === "string" && this.creator.length)
                writer.writeString(1, this.creator);
            if (typeof this.to === "string" && this.to.length)
                writer.writeString(2, this.to);
            if (typeof this.index === "string" && this.index.length)
                writer.writeString(3, this.index);
            if (typeof this.secret === "string" && this.secret.length)
                writer.writeString(4, this.secret);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgWithdrawHashlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawHashlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.to = reader.readString();
                        break;
                    case 3:
                        message.index = reader.readString();
                        break;
                    case 4:
                        message.secret = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgWithdrawHashlock {
            return MsgWithdrawHashlock.deserialize(bytes);
        }
    }
    export class MsgWithdrawHashlockResponse extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgWithdrawHashlockResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgWithdrawHashlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawHashlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgWithdrawHashlockResponse {
            return MsgWithdrawHashlockResponse.deserialize(bytes);
        }
    }
    export class MsgCloseChannel extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            creator?: string;
            from?: string;
            toA?: string;
            coinA?: dependency_1.cosmos.base.v1beta1.Coin;
            toB?: string;
            coinB?: dependency_1.cosmos.base.v1beta1.Coin;
            channelid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("toA" in data && data.toA != undefined) {
                    this.toA = data.toA;
                }
                if ("coinA" in data && data.coinA != undefined) {
                    this.coinA = data.coinA;
                }
                if ("toB" in data && data.toB != undefined) {
                    this.toB = data.toB;
                }
                if ("coinB" in data && data.coinB != undefined) {
                    this.coinB = data.coinB;
                }
                if ("channelid" in data && data.channelid != undefined) {
                    this.channelid = data.channelid;
                }
            }
        }
        get creator() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get toA() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set toA(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get coinA() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 4) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set coinA(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get toB() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set toB(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get coinB() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 6) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set coinB(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get channelid() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set channelid(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            creator?: string;
            from?: string;
            toA?: string;
            coinA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            toB?: string;
            coinB?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            channelid?: string;
        }) {
            const message = new MsgCloseChannel({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.toA != null) {
                message.toA = data.toA;
            }
            if (data.coinA != null) {
                message.coinA = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.coinA);
            }
            if (data.toB != null) {
                message.toB = data.toB;
            }
            if (data.coinB != null) {
                message.coinB = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.coinB);
            }
            if (data.channelid != null) {
                message.channelid = data.channelid;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                from?: string;
                toA?: string;
                coinA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                toB?: string;
                coinB?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                channelid?: string;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.toA != null) {
                data.toA = this.toA;
            }
            if (this.coinA != null) {
                data.coinA = this.coinA.toObject();
            }
            if (this.toB != null) {
                data.toB = this.toB;
            }
            if (this.coinB != null) {
                data.coinB = this.coinB.toObject();
            }
            if (this.channelid != null) {
                data.channelid = this.channelid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.creator === "string" && this.creator.length)
                writer.writeString(1, this.creator);
            if (typeof this.from === "string" && this.from.length)
                writer.writeString(2, this.from);
            if (typeof this.toA === "string" && this.toA.length)
                writer.writeString(3, this.toA);
            if (this.coinA !== undefined)
                writer.writeMessage(4, this.coinA, () => this.coinA.serialize(writer));
            if (typeof this.toB === "string" && this.toB.length)
                writer.writeString(5, this.toB);
            if (this.coinB !== undefined)
                writer.writeMessage(6, this.coinB, () => this.coinB.serialize(writer));
            if (typeof this.channelid === "string" && this.channelid.length)
                writer.writeString(7, this.channelid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCloseChannel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCloseChannel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readString();
                        break;
                    case 3:
                        message.toA = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.coinA, () => message.coinA = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 5:
                        message.toB = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.coinB, () => message.coinB = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 7:
                        message.channelid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCloseChannel {
            return MsgCloseChannel.deserialize(bytes);
        }
    }
    export class MsgCloseChannelResponse extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgCloseChannelResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCloseChannelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCloseChannelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCloseChannelResponse {
            return MsgCloseChannelResponse.deserialize(bytes);
        }
    }
    export class MsgOpenChannel extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            creator?: string;
            partA?: string;
            partB?: string;
            coinA?: dependency_1.cosmos.base.v1beta1.Coin;
            coinB?: dependency_1.cosmos.base.v1beta1.Coin;
            multisigAddr?: string;
            sequence?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("partA" in data && data.partA != undefined) {
                    this.partA = data.partA;
                }
                if ("partB" in data && data.partB != undefined) {
                    this.partB = data.partB;
                }
                if ("coinA" in data && data.coinA != undefined) {
                    this.coinA = data.coinA;
                }
                if ("coinB" in data && data.coinB != undefined) {
                    this.coinB = data.coinB;
                }
                if ("multisigAddr" in data && data.multisigAddr != undefined) {
                    this.multisigAddr = data.multisigAddr;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
            }
        }
        get creator() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get partA() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set partA(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get partB() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set partB(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get coinA() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 4) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set coinA(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get coinB() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 5) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set coinB(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get multisigAddr() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set multisigAddr(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get sequence() {
            return pb_1.Message.getField(this, 7) as number;
        }
        set sequence(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            creator?: string;
            partA?: string;
            partB?: string;
            coinA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            coinB?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            multisigAddr?: string;
            sequence?: number;
        }) {
            const message = new MsgOpenChannel({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.partA != null) {
                message.partA = data.partA;
            }
            if (data.partB != null) {
                message.partB = data.partB;
            }
            if (data.coinA != null) {
                message.coinA = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.coinA);
            }
            if (data.coinB != null) {
                message.coinB = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.coinB);
            }
            if (data.multisigAddr != null) {
                message.multisigAddr = data.multisigAddr;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                partA?: string;
                partB?: string;
                coinA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                coinB?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                multisigAddr?: string;
                sequence?: number;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.partA != null) {
                data.partA = this.partA;
            }
            if (this.partB != null) {
                data.partB = this.partB;
            }
            if (this.coinA != null) {
                data.coinA = this.coinA.toObject();
            }
            if (this.coinB != null) {
                data.coinB = this.coinB.toObject();
            }
            if (this.multisigAddr != null) {
                data.multisigAddr = this.multisigAddr;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.creator === "string" && this.creator.length)
                writer.writeString(1, this.creator);
            if (typeof this.partA === "string" && this.partA.length)
                writer.writeString(2, this.partA);
            if (typeof this.partB === "string" && this.partB.length)
                writer.writeString(3, this.partB);
            if (this.coinA !== undefined)
                writer.writeMessage(4, this.coinA, () => this.coinA.serialize(writer));
            if (this.coinB !== undefined)
                writer.writeMessage(5, this.coinB, () => this.coinB.serialize(writer));
            if (typeof this.multisigAddr === "string" && this.multisigAddr.length)
                writer.writeString(6, this.multisigAddr);
            if (this.sequence !== undefined)
                writer.writeUint64(7, this.sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgOpenChannel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgOpenChannel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.partA = reader.readString();
                        break;
                    case 3:
                        message.partB = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.coinA, () => message.coinA = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.coinB, () => message.coinB = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 6:
                        message.multisigAddr = reader.readString();
                        break;
                    case 7:
                        message.sequence = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgOpenChannel {
            return MsgOpenChannel.deserialize(bytes);
        }
    }
    export class MsgOpenChannelResponse extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            index?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get index() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            index?: string;
        }) {
            const message = new MsgOpenChannelResponse({});
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: string;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.index === "string" && this.index.length)
                writer.writeString(1, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgOpenChannelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgOpenChannelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgOpenChannelResponse {
            return MsgOpenChannelResponse.deserialize(bytes);
        }
    }
    export class MsgFund extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            creator?: string;
            from?: string;
            channelid?: string;
            coin?: dependency_1.cosmos.base.v1beta1.Coin;
            balanceA?: dependency_1.cosmos.base.v1beta1.Coin;
            balanceB?: dependency_1.cosmos.base.v1beta1.Coin;
            hashcodeB?: string;
            multisig?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("channelid" in data && data.channelid != undefined) {
                    this.channelid = data.channelid;
                }
                if ("coin" in data && data.coin != undefined) {
                    this.coin = data.coin;
                }
                if ("balanceA" in data && data.balanceA != undefined) {
                    this.balanceA = data.balanceA;
                }
                if ("balanceB" in data && data.balanceB != undefined) {
                    this.balanceB = data.balanceB;
                }
                if ("hashcodeB" in data && data.hashcodeB != undefined) {
                    this.hashcodeB = data.hashcodeB;
                }
                if ("multisig" in data && data.multisig != undefined) {
                    this.multisig = data.multisig;
                }
            }
        }
        get creator() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get channelid() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set channelid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get coin() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 4) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set coin(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get balanceA() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 5) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set balanceA(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get balanceB() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 6) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set balanceB(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hashcodeB() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set hashcodeB(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get multisig() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set multisig(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            creator?: string;
            from?: string;
            channelid?: string;
            coin?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            balanceA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            balanceB?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            hashcodeB?: string;
            multisig?: string;
        }) {
            const message = new MsgFund({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.channelid != null) {
                message.channelid = data.channelid;
            }
            if (data.coin != null) {
                message.coin = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.coin);
            }
            if (data.balanceA != null) {
                message.balanceA = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.balanceA);
            }
            if (data.balanceB != null) {
                message.balanceB = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.balanceB);
            }
            if (data.hashcodeB != null) {
                message.hashcodeB = data.hashcodeB;
            }
            if (data.multisig != null) {
                message.multisig = data.multisig;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                from?: string;
                channelid?: string;
                coin?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                balanceA?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                balanceB?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                hashcodeB?: string;
                multisig?: string;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.channelid != null) {
                data.channelid = this.channelid;
            }
            if (this.coin != null) {
                data.coin = this.coin.toObject();
            }
            if (this.balanceA != null) {
                data.balanceA = this.balanceA.toObject();
            }
            if (this.balanceB != null) {
                data.balanceB = this.balanceB.toObject();
            }
            if (this.hashcodeB != null) {
                data.hashcodeB = this.hashcodeB;
            }
            if (this.multisig != null) {
                data.multisig = this.multisig;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.creator === "string" && this.creator.length)
                writer.writeString(1, this.creator);
            if (typeof this.from === "string" && this.from.length)
                writer.writeString(2, this.from);
            if (typeof this.channelid === "string" && this.channelid.length)
                writer.writeString(3, this.channelid);
            if (this.coin !== undefined)
                writer.writeMessage(4, this.coin, () => this.coin.serialize(writer));
            if (this.balanceA !== undefined)
                writer.writeMessage(5, this.balanceA, () => this.balanceA.serialize(writer));
            if (this.balanceB !== undefined)
                writer.writeMessage(6, this.balanceB, () => this.balanceB.serialize(writer));
            if (typeof this.hashcodeB === "string" && this.hashcodeB.length)
                writer.writeString(7, this.hashcodeB);
            if (typeof this.multisig === "string" && this.multisig.length)
                writer.writeString(8, this.multisig);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgFund {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgFund();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readString();
                        break;
                    case 3:
                        message.channelid = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.coin, () => message.coin = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.balanceA, () => message.balanceA = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.balanceB, () => message.balanceB = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 7:
                        message.hashcodeB = reader.readString();
                        break;
                    case 8:
                        message.multisig = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgFund {
            return MsgFund.deserialize(bytes);
        }
    }
    export class MsgFundResponse extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            index?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get index() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            index?: string;
        }) {
            const message = new MsgFundResponse({});
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: string;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.index === "string" && this.index.length)
                writer.writeString(1, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgFundResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgFundResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgFundResponse {
            return MsgFundResponse.deserialize(bytes);
        }
    }
}
